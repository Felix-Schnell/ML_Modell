Projektstruktur und Ablage der Dateien
Alle fÃ¼r die REST-API und die zugehÃ¶rigen Tests relevanten Dateien sollten im Ordner REST-API/ liegen:
REST-API/
â”œâ”€â”€ fraud_api.py            # Haupt-API mit FastAPI
â”œâ”€â”€ test_fraud_api.py       # Testskript mit Pytest fÃ¼r die API
â”œâ”€â”€ scaler.pkl              # Gespeicherter StandardScaler
â”œâ”€â”€ xgboost_model.pkl       # Gespeichertes XGBoost-Modell
â”œâ”€â”€ feature_names.pkl       # Liste der Feature-Namen
â”œâ”€â”€ autoencoder_model.h5    # Keras Autoencoder Modell

## REST-API zur automatisierten Betrugserkennung

Dieses Projekt enthÃ¤lt eine voll funktionsfÃ¤hige REST-Programmierschnittstelle (API), die es ermÃ¶glicht, Betrugswahrscheinlichkeiten fÃ¼r Kassentransaktionen automatisiert Ã¼ber HTTP-Requests zu berechnen â€“ unabhÃ¤ngig von der Streamlit-OberflÃ¤che.

Starten:

py -m uvicorn fraud_api:app --reload

### ðŸ”Œ Endpoint
REST-API Endpoint
URL lokal: http://127.0.0.1:8000/fraud-prediction
Dokumentation & Test-UI: http://127.0.0.1:8000/docs

Diese Schnittstelle erwartet JSON-Daten im spezifizierten Format (siehe Beispiel weiter unten)
und liefert eine Vorhersage, ob eine Transaktion betrÃ¼gerisch ist, inklusive Wahrscheinlichkeiten und ErklÃ¤rungen

### Zweck der API

Die REST-API ist speziell dafÃ¼r vorgesehen, **automatisch und maschinell angesprochen zu werden**, z.â€¯B. aus anderen Python-Programmen, Test-Skripten oder Tools.  

---

### Beispiel-Request (Python)

json_data = {
  "transaction_header": {
    "store_id": "c1f5d15e-baf6-41e2-890a-135c24cf4c32",
    "cash_desk": 2,
    "transaction_start": "2025-07-08T12:00:00",
    "transaction_end": "2025-07-08T12:01:30",
    "total_amount": 42.75,
    "payment_medium": "CASH",
    "customer_feedback": 4
  },
  "transaction_lines": [
    {
      "id": 1,
      "product_id": "f20c1a10-3c51-4a91-9f80-4563a7e157bc",
      "timestamp": "2025-07-08T12:00:10",
      "pieces_or_weight": 1,
      "sales_price": 18.50,
      "was_voided": false,
      "camera_product_similar": true,
      "camera_certainty": 0.6
    },
    {
      "id": 2,
      "product_id": "87412601-4aa6-4c00-84f2-5f3ad2aa67cd",
      "timestamp": "2025-07-08T12:00:45",
      "pieces_or_weight": 1,
      "sales_price": 24.25,
      "was_voided": false,
      "camera_product_similar": true,
      "camera_certainty": 0.65
    }
  ]
}

{
  "version": "1.2.3",
  "is_fraud": true,
  "fraud_proba": 0.823479,
  "estimated_damage": 9.53,
  "explanation": {
    "human_readable_reason": "Low camera certainty on products; High transaction amount",
    "offending_products": ["PERSONAL CARE"]
  }
}

API Testen mit test_fraud_api.py
Das Testskript test_fraud_api.py enthÃ¤lt automatisierte Tests, die Ã¼berprÃ¼fen, ob die API erwartungsgemÃ¤ÃŸ auf Anfragen reagiert.

Nutzung:
Stelle sicher, dass die REST-API nicht gestartet wurde. Der Test startet es von selbst und prÃ¼ft ob es funktioniert.

Testen der API
Die REST-API kann sowohl automatisiert als auch manuell getestet werden:

Automatisierte Tests:
Es liegt ein einfaches Testskript (test_fraud_api.py) bei, das mit pytest ausgefÃ¼hrt werden kann, um die FunktionalitÃ¤t der API programmgesteuert zu Ã¼berprÃ¼fen.

Manueller Test Ã¼ber Postman:
Alternativ kann die API auch manuell getestet werden, z.B. mit Postman. HierfÃ¼r einfach einen POST-Request an den Endpoint
http://127.0.0.1:8000/fraud-prediction
mit entsprechendem JSON-Payload senden.

Starte die Tests mit:
py -m pytest test_fraud_api.py
Das Skript sendet Beispielanfragen an die API-Funktion und vergleicht die Antwort mit den Erwartungen.
PÃ¼rft, ob die API mit HTTP 200 antwortet.


Zweck:
Sicherstellen, dass die API korrekt funktioniert und keine Fehler wirft.

Automatisierte QualitÃ¤tssicherung vor Deployment oder Abgabe.


